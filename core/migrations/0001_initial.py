# Generated by Django 5.2.1 on 2025-05-24 19:47

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('medic', 'Medic'), ('admin', 'Admin')], max_length=10)),
                ('imanis_code', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MedicalExam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('blood_pressure', models.CharField(blank=True, help_text='e.g., 120/80', max_length=20)),
                ('heart_rate', models.PositiveSmallIntegerField(blank=True, help_text='Beats per minute (e.g, 72)', null=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Body temperature in Â°C', max_digits=4, null=True)),
                ('respiratory_rate', models.PositiveSmallIntegerField(blank=True, help_text='Breaths per minute (e.g, 16)', null=True)),
                ('oxygen_saturation', models.PositiveSmallIntegerField(blank=True, help_text='Oxygen saturation in % (e.g., 98)', null=True)),
                ('lab_test', models.CharField(choices=[('CBC', 'Complete Blood Count (CBC)'), ('CMP', 'Comprehensive Metabolic Panel (CMP)'), ('PT', 'Pregnancy Test (PT)'), ('LIPID', 'Lipid Panel'), ('GLUCOSE', 'Blood Glucose'), ('UA', 'Urinalysis (UA)'), ('TSH', 'Thyroid Stimulating Hormone (TSH)'), ('HBA1C', 'HbA1c'), ('VITD', 'Vitamin D Level'), ('CRP', 'C-Reactive Protein (CRP)'), ('LFT', 'Liver Function Tests (LFTs)')], max_length=20)),
                ('lab_test_result', models.TextField(blank=True, help_text='Result or notes for the lab test')),
                ('procedure', models.CharField(choices=[('EXAM', 'Physical Examination'), ('PHLEBOTOMY', 'Blood Draw (Phlebotomy)'), ('VACCINE', 'Vaccination/Immunization'), ('WOUND_CARE', 'Wound Dressing Change / Care'), ('SUTURE', 'Suture Placement / Removal'), ('IV', 'IV Line Insertion'), ('ECG', 'Electrocardiogram (ECG/EKG)'), ('XRAY', 'X-ray'), ('DRAINAGE', 'Minor Incision and Drainage (I&D)'), ('CONSULT', 'Consultation')], max_length=20)),
                ('procedure_result', models.TextField(blank=True, help_text='Result or notes for the procedure')),
                ('is_pregnant', models.BooleanField(blank=True, null=True)),
                ('pregnancy_weeks', models.IntegerField(blank=True, null=True)),
                ('last_menstrual_period', models.DateField(blank=True, null=True)),
                ('menstrual_cycle_notes', models.TextField(blank=True)),
                ('diagnosis', models.TextField()),
                ('prescribed_medications', models.TextField(blank=True)),
                ('follow_up_instructions', models.TextField(blank=True)),
                ('lifestyle_recommendations', models.TextField(blank=True)),
                ('referred_to_specialist', models.CharField(blank=True, max_length=255)),
                ('review_notes', models.TextField(blank=True, help_text='General review or summary of visit & any other comments')),
                ('medic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatments', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_treatments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height_cm', models.FloatField(blank=True, help_text='Height in centimeters', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(300)])),
                ('weight_kg', models.FloatField(blank=True, help_text='Weight in kilograms', null=True, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(500)])),
                ('blood_group', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('AB', 'AB'), ('O', 'O')], max_length=2, null=True)),
                ('rh_factor', models.CharField(blank=True, choices=[('Positive', 'Positive'), ('Negative', 'Negative')], max_length=8, null=True)),
                ('allergies', models.TextField(blank=True)),
                ('chronic_conditions', models.TextField(blank=True, help_text='List any chronic conditions like Diabetes, Hypertension, etc.')),
                ('medical_history', models.TextField(blank=True)),
                ('past_surgeries', models.TextField(blank=True, help_text='Describe past surgeries (type, date, outcome)')),
                ('current_medications', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PatientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('non-binary', 'non-binary')], max_length=20)),
                ('marital_status', models.CharField(choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=20)),
                ('phone_number', models.CharField(max_length=15)),
                ('contact_email', models.EmailField(max_length=254)),
                ('next_of_kin_name', models.CharField(max_length=100)),
                ('next_of_kin_phone', models.CharField(max_length=15)),
                ('next_of_kin_email', models.EmailField(max_length=254)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
